// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Space {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hostId    String
  host      User     @relation(name: "hosting", fields: [hostId], references: [id])
  users     User[]   @relation(name: "participating")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  images      String[]
  posts       Post[]
}

model Post {
  id        String    @id @default(cuid())
  author    User      @relation(fields: [userId], references: [id])
  userId    String
  project   Project?  @relation(fields: [projectId], references: [id])
  projectId String?
  image     String?
  content   String
  comments  Comment[]
}

model Comment {
  id        String    @id @default(cuid())
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  comments  Comment[] @relation(name: "replies")
  comment   Comment?  @relation(name: "replies", fields: [commentId], references: [id])
  commentId String?
  content   String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  participating Space[]   @relation(name: "participating")
  hosting       Space[]   @relation(name: "hosting")
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
